{{!-- views/match-history.hbs --}}
<section class="match-history-container">
  <h2 class="match-history-title">Match History</h2>
  <p class="match-history-subtitle">Complete record of all matches played</p>

  <form class="filters-box" onsubmit="return false;">
    <div class="filters-top">
      <div class="form-field">
        <label class="field-label">Competition</label>
        <select name="competition" id="competition">
          <option>All</option>
          <option>Premier League</option>
          <option value="La Liga">La Liga</option>
          <option value="S√©rie A">S√©rie A (Brazilian League)</option>
          <option>Bundesliga</option>
          <option>Ligue 1</option>
          <option>Champions League</option>
          <option>Europa League</option>
          <option>Conference League</option>
          <option>Copa del Rey</option>
          <option>FA Cup</option>
          <option>Carabao Cup</option>
          <option>Club World Cup</option>
          <option>World Cup</option>
          <option>Euro</option>
          <option>Copa America</option>
          <option>AFCON</option>
          <option>Asian Cup</option>
          <option>Nations League</option>
          <option>Nations League</option>
          <option>International non-friendly games</option>

        </select>
      </div>

      <div class="form-field">
        <label class="field-label">Stage</label>
        <select name="stage" id="stage">
          <option>All</option>
          <option>League Stage</option>
          <option>Group Stage</option>
          <option>Knockout</option>
          <option>Round of 16</option>
          <option>Quarter Final</option>
          <option>Semi Final</option>
          <option>Final</option>
          <option>Playoffs</option>
          <option>3rd Place</option>
          <option>Preliminary Round</option>
        </select>
      </div>

      <div class="form-field">
        <label class="field-label">Season</label>
        <select name="season" id="season">
          <option>All</option>
          <option value="2024-25">2024-25</option>
          <option value="2023-24">2023-24</option>
          <option value="2022-23">2022-23</option>
          <option value="2018-19">2018-19</option>
          <option value="2018">2018</option>
          <option value="2017">2017</option>
          <!-- Add more seasons as needed -->
        </select>
      </div>



      <div class="form-field">
        <label class="field-label">Minimum Goals</label>
        <input type="number" name="minGoals" id="minGoals" placeholder="Minimum Goals">
      </div>

      <div class="form-field">
        <label class="field-label">Minimum Assists</label>
        <input type="number" name="minAssists" id="minAssists" placeholder="Minimum Assists">
      </div>

      <div class="form-field">
        <label class="field-label">Match Result</label>
        <select name="rest" id="rest">
          <option>All</option>
          <option>Win</option>
          <option>Loss</option>
          <option>Draw</option>
        </select>
      </div>
    </div>

    <button type="button" class="advanced-toggle" id="toggleAdvanced">
      ‚öôÔ∏è Advanced Filters <span id="arrow">‚ñæ</span>
    </button>

    <div class="advanced-filters hidden" id="advancedFilters">
      <div class="form-field">
        <label class="field-label">Goal Types</label>
        <div class="dropdown-checkbox">
          <button type="button" class="dropdown-toggle" onclick="toggleDropdown(this)">
            Goal Types
          </button>
          <div class="dropdown-options hidden">

            <label for="goal-penalty"><input id="goal-penalty" class="goal-type" type="checkbox" name="goalTypes"
                value="Penalty">Penalty</label>

            <label for="goal-freekick"><input id="goal-freekick" class="goal-type" type="checkbox" name="goalTypes"
                value="Free Kick">Free Kick</label>


            <label for="goal-outside"><input id="goal-outside" class="goal-type" type="checkbox" name="goalTypes"
                value="Outside the Box">Outside the Box</label>

            <label for="goal-inside"><input id="goal-inside" class="goal-type" type="checkbox" name="goalTypes"
                value="Inside the Box">Inside the Box</label>

            <label for="goal-header"><input id="goal-header" class="goal-type" type="checkbox" name="goalTypes"
                value="Header">Header</label>

            <label for="goal-dribble"><input id="goal-dribble" class="goal-type" type="checkbox" name="goalTypes"
                value="dribblePast">Dribble Past 3+ Players</label>
          </div>
        </div>
      </div>

      <div class="form-field">
        <label class="field-label">Year</label>
        <select name="year" id="year">
          <option>All</option>
          <option value="2025">2025</option>
          <option value="2024">2024</option>
          <option value="2023">2023</option>
          <!-- Add more years as needed -->
        </select>
      </div>

      <div class="form-field">
        <label class="field-label">Chances Created</label>
        <input type="number" name="chancesCreated" id="chancesCreated" placeholder="Chances Created">
      </div>

      <div class="form-field">
        <label class="field-label">Dribbles</label>
        <input type="number" name="dribbles" id="dribbles" placeholder="Dribbles">
      </div>

      <div class="form-field">
        <label class="field-label">Minutes Played</label>
        <input type="number" name="minutesPlayed" id="minutesPlayed" placeholder="Minutes Played">
      </div>

      <div class="form-field">
        <label class="field-label">For (team)</label>
        <select name="for" id="for">
          <option>All</option>
          <option value="Real Madrid">Real Madrid</option>
          <option value="Flamengo">Flamengo</option>
          <option value="Brazil">Brazil</option>
        </select>

      </div>

      <div class="form-field">
        <label class="field-label">Against</label>
        <input type="text" name="against" id="against" placeholder="Against">
      </div>
    </div>

  </form>

  <div class="filter-bottom-row">
    <span class="match-count">Showing 100 of 250 matches</span>
    <button type="button" class="clear-button sort-manual" id="sortBtn">Sort</button>
    <div id="sortPopup" class="sort-popup hidden">
      <label><input type="radio" name="sort" value="dateDesc"> Date: Newest ‚Üí Oldest</label><br>
      <label><input type="radio" name="sort" value="dateAsc"> Date: Oldest ‚Üí Newest</label><br>
    </div>

    <button type="button" class="clear-button" id="clearFiltersBtn">Clear All Filters</button>
  </div>


  <div class="header-row">
     <span>Match no:</span>
    <span><i data-lucide="calendar" class="icon-adjust icon-small"></i> Date</span>
    <span>For</span>
    <span>Against</span>
    <span>üèÜ Tournament</span>
    <span>Stage</span>
    <span>üéØ Goals</span>
    <span>‚û°Ô∏è Assists</span>
  </div>


  <!-- Match Card Component -->
  <div id="matchesContainer">

  </div>

  <!-- Loader -->
  <div id="matchesContainer">
    <div id="loader">Loading matches...</div>
  </div>

  <!-- Handlebars Template -->
  <div id="matches-container">
    {{#each matches}}
    {{> match-card this}}
    {{/each}}
  </div>

  <div class="pagination">
    {{#if hasMore}}
    <button id="load-more" data-offset="{{offset}}" data-limit="{{limit}}">
      Load More
    </button>
    {{/if}}
  </div>
</section>

{{!-- loadMoreBtn --}}


<script>


  document.getElementById('toggleAdvanced').addEventListener('click', () => {
    const adv = document.getElementById('advancedFilters');
    const arrow = document.getElementById('arrow');
    adv.classList.toggle('hidden');
    arrow.textContent = adv.classList.contains('hidden') ? '‚ñæ' : '‚ñ¥';
  });

  function toggleCardDetails(button) {
    const card = button.closest('.match-card');
    card.classList.toggle('expanded');
  }



  function toggleDropdown(button) {
    const dropdown = button.nextElementSibling;
    dropdown.classList.toggle('hidden');
  }

  // Optional: Close on outside click
  document.addEventListener('click', function (e) {
    document.querySelectorAll('.dropdown-checkbox').forEach(drop => {
      if (!drop.contains(e.target)) {
        drop.querySelector('.dropdown-options').classList.add('hidden');
      }
    });
  });
  const sortBtn = document.getElementById('sortBtn');
  const sortPopup = document.getElementById('sortPopup');

  // Toggle popup
  sortBtn.addEventListener('click', () => {
    sortPopup.classList.toggle('hidden');
  });

  // When sorting option selected
  document.querySelectorAll('input[name="sort"]').forEach(radio => {
    radio.addEventListener('change', () => {
      sortPopup.classList.add('hidden'); // hide popup
      updateFilter(0, false); // reload with sort
    });
  });

  document.addEventListener('click', function (event) {
    const isClickInside = sortPopup.contains(event.target) || sortBtn.contains(event.target);

    if (!isClickInside && !sortPopup.classList.contains('hidden')) {
      sortPopup.classList.add('hidden');
    }
  });


</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const competitionSelect = document.getElementById('competition');
  const stageSelect = document.getElementById('stage');
  const seasonSelect = document.getElementById('season');
  const yearSelect = document.getElementById('year');
  const minGoalsInput = document.getElementById('minGoals');
  const minAssistsInput = document.getElementById('minAssists');
  const chancesCreatedInput = document.getElementById('chancesCreated');
  const dribblesInput = document.getElementById('dribbles');
  const minutesPlayedInput = document.getElementById('minutesPlayed');
  const resultSelect = document.getElementById('rest');
  const goalTypeCheckboxes = document.querySelectorAll('.goal-type');
  const forTeamSelect = document.getElementById('for');       // NEW
  const againstTeamInput = document.getElementById('against'); // NEW
  const loadMoreBtn = document.getElementById('load-more');
  const container = document.getElementById('matches-container');

  let currentOffset = 0;
  let currentLimit = 100; // or any number you want


  // Current filter states
  let currentCompetition = '';
  let currentMinGoals = 0;
  let currentMinAssists = 0;
  let currentCC = 0;
  let currentDribbles = 0;
  let currentMnt = 0;
  let currentStage = '';
  let currentSeason = '';
  let currentYear = '';
  let currentResult = '';
  let currentForTeam = '';    // NEW
  let currentAgainstTeam = ''; // NEW
  let currentGoalTypes = [];

  function applyFilters() {
    currentCompetition = competitionSelect.value;
    currentMinGoals = parseInt(minGoalsInput.value) || 0;
    currentMinAssists = parseInt(minAssistsInput.value) || 0;
    currentCC = parseInt(chancesCreatedInput.value) || 0;
    currentDribbles = parseInt(dribblesInput.value) || 0;
    currentMnt = parseInt(minutesPlayedInput.value) || 0;
    currentStage = stageSelect.value;
    currentSeason = seasonSelect.value;
    currentYear = yearSelect.value;
    currentResult = resultSelect.value;
    currentForTeam = forTeamSelect.value;                   // NEW
    currentAgainstTeam = againstTeamInput.value.trim();     // NEW
    currentGoalTypes = Array.from(goalTypeCheckboxes)
      .filter(cb => cb.checked)
      .map(cb => cb.value);

    currentOffset = 0;
    fetchMatches(
      currentOffset,
      currentLimit,
      currentCompetition,
      currentMinGoals,
      currentMinAssists,
      currentCC,
      currentDribbles,
      currentMnt,
      currentStage,
      currentSeason,
      currentYear,
      currentResult,
      currentForTeam,       // NEW
      currentAgainstTeam,   // NEW
      currentGoalTypes,
      true
    );
  }

  // Event listeners
  competitionSelect.addEventListener('change', applyFilters);
  minGoalsInput.addEventListener('input', applyFilters);
  minAssistsInput.addEventListener('input', applyFilters);
  chancesCreatedInput.addEventListener('input', applyFilters);
  dribblesInput.addEventListener('input', applyFilters);
  minutesPlayedInput.addEventListener('input', applyFilters);
  stageSelect.addEventListener('change', applyFilters);
  seasonSelect.addEventListener('change', applyFilters);
  yearSelect.addEventListener('change', applyFilters);
  resultSelect.addEventListener('change', applyFilters);
  forTeamSelect.addEventListener('change', applyFilters);    // NEW
  againstTeamInput.addEventListener('input', applyFilters);  // NEW
  goalTypeCheckboxes.forEach(cb => cb.addEventListener('change', applyFilters));

  loadMoreBtn?.addEventListener('click', () => {
    fetchMatches(
      currentOffset,
      currentLimit,
      currentCompetition,
      currentMinGoals,
      currentMinAssists,
      currentCC,
      currentDribbles,
      currentMnt,
      currentStage,
      currentSeason,
      currentYear,
      currentResult,
      currentForTeam,       // NEW
      currentAgainstTeam,   // NEW
      currentGoalTypes,
      false
    );
  });

  function fetchMatches(offset, limit, competition, minGoals, minAssists, CC, dribbles, mnt, stage, season, year, result, forTeam, againstTeam, goalTypes, reset) {
    let url = `/mhv?offset=${offset}&limit=${limit}`;
    if (competition && competition !== 'All') url += `&competition=${encodeURIComponent(competition)}`;
    if (minGoals > 0) url += `&minGoals=${minGoals}`;
    if (minAssists > 0) url += `&minAssists=${minAssists}`;
    if (CC > 0) url += `&CC=${CC}`;
    if (dribbles > 0) url += `&dribbles=${dribbles}`;
    if (mnt > 0) url += `&mnt=${mnt}`;
    if (stage && stage !== 'All') url += `&stage=${encodeURIComponent(stage)}`;
    if (season && season !== 'All') url += `&season=${encodeURIComponent(season)}`;
    if (year && year !== 'All') url += `&year=${encodeURIComponent(year)}`;
    if (result && result !== 'All') url += `&result=${encodeURIComponent(result)}`;
    if (forTeam && forTeam !== 'All') url += `&forTeam=${encodeURIComponent(forTeam)}`; // NEW
    if (againstTeam) url += `&againstTeam=${encodeURIComponent(againstTeam)}`;         // NEW
    if (goalTypes.length > 0) url += `&goalTypes=${encodeURIComponent(goalTypes.join(','))}`;

    fetch(url)
      .then(res => res.text())
      .then(html => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newMatches = doc.querySelectorAll('#matches-container .match-card');

        if (reset) container.innerHTML = '';

        newMatches.forEach(card => container.appendChild(card));

        currentOffset += limit;

        const newLoadMoreBtn = doc.getElementById('load-more');
        if (!newLoadMoreBtn) {
          loadMoreBtn.style.display = 'none';
        } else {
          loadMoreBtn.style.display = 'block';
          loadMoreBtn.dataset.offset = currentOffset;
        }
      })
      .catch(err => console.error(err));
  }
});
</script>
